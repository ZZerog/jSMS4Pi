package cz.zerog.jsms4pi;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/*
 * #%L
 /*
 * jSMS4Pi
 * %%
 * Copyright (C) 2015 jSMS4Pi
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */
import cz.zerog.jsms4pi.at.CNMI;
import cz.zerog.jsms4pi.tool.TypeOfMemory;

/**
 *
 * @author zerog
 */
public class Configurator {

	private static final Logger log = LogManager.getLogger();

	private final Properties defaultProperties;
	private Properties currentProperties;

	public static final String MEMORY_RW = "memory.rw";
	public static final String MEMORY_STORAGE = "memory.storage";
	public static final String MEMORY_RECEIVED = "memory.received";
	public static final String CNMI_MODE = "CNMI.mode";
	public static final String CNMI_MT = "CNMI.mt";
	public static final String CNMI_BM = "CNMI.bm";
	public static final String CNMI_DS = "CNMI.ds";

	public Configurator() {
		defaultProperties = getPropeties("modem/default.properties");
		if (defaultProperties == null) {
			log.warn("Cannot load default properties!");
		}
	}

	void selectModem(ModemInformation modemInfo) {
		for (String pathName : modemInfo.getNames()) {
			Properties prop = getPropeties(pathName + ".properties");
			log.info("Searching: '{}.propeties' ", pathName);
			if (prop != null) {
				log.info("Used '{}' setting", pathName);
				currentProperties = prop;
				return;
			}
		}
		log.info("Used default setting");
		currentProperties = defaultProperties;
	}

	public void printAll() {
		System.out.println(" == Modem setting properties ==");
		for (String key : currentProperties.stringPropertyNames()) {
			System.out.println(key + " = " + currentProperties.getProperty(key));
		}
		System.out.println("====");
	}

	/**
	 *
	 *
	 * @return
	 */
	TypeOfMemory getMemory1RW() {
		return TypeOfMemory.valueOf(currentProperties.getProperty(MEMORY_RW));
	}

	/**
	 *
	 * @return
	 */
	TypeOfMemory getMemory2Storage() {
		return TypeOfMemory.valueOf(currentProperties.getProperty(MEMORY_STORAGE));
	}

	/**
	 *
	 * @return
	 */
	TypeOfMemory getMemory3Rec() {
		return TypeOfMemory.valueOf(currentProperties.getProperty(MEMORY_RECEIVED));
	}

	/**
	 *
	 * @return
	 */
	CNMI.Mode getCNMIMode() {
		return CNMI.Mode.valueOf(Integer.parseInt(currentProperties.getProperty(CNMI_MODE)));
	}

	CNMI.Mt getCNMIMt() {
		return CNMI.Mt.valueOf(Integer.parseInt(currentProperties.getProperty(CNMI_MT)));
	}

	CNMI.Bm getCNMIBm() {
		return CNMI.Bm.valueOf(Integer.parseInt(currentProperties.getProperty(CNMI_BM)));
	}

	CNMI.Ds getCNMIDs() {
		return CNMI.Ds.valueOf(Integer.parseInt(currentProperties.getProperty(CNMI_DS)));
	}

	public static boolean generateFile(ModemInformation modemInfo, Map<String, String> settings) {
		Properties prop = new Properties();

		Set<Map.Entry<String, String>> entrys = settings.entrySet();
		for (Map.Entry<String, String> entry : entrys) {
			prop.setProperty(entry.getKey(), entry.getValue());
		}

		FileOutputStream out = null;
		try {
			out = new FileOutputStream(modemInfo.getManugaturerAndModem() + ".properties");
			prop.store(out, "Generated by jSMS4Pi for modem " + modemInfo.getManugaturerAndModem());
		} catch (IOException e) {
			log.error(e, e);
			return false;
		} finally {
			try {
				if (out != null) {
					out.close();
				}
			} catch (IOException e) {
				log.error(e, e);
			}
		}
		return true;
	}

	private Properties getPropeties(String path) {
		Properties p = null;
		try {
			// absolute path
			InputStream is = Configurator.class.getClassLoader().getResourceAsStream(path);
			if (is == null) {
				return null;
			}

			p = new Properties(defaultProperties);
			p.load(is);
			is.close();

		} catch (IOException ex) {
			log.warn(ex, ex);
		}
		return p;
	}
}
